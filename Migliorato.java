/*
 * This file was automatically generated by EvoSuite
 * Mon Dec 30 18:31:59 GMT 2024
 */

package com.example;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.example.App;
import java.util.NoSuchElementException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.util.SystemInUtil;
import org.junit.runner.RunWith;

//Test Evosuite originali
//@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
/*public class App_ESTest extends App_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      String[] stringArray0 = new String[4];
      SystemInUtil.addInputLine(" \u00E8 palindroma? ");
      App.main(stringArray0);
      assertEquals(4, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      // Undeclared exception!
      try { 
        App.Palindroma("BKu&cuO$wx$=Z", (-2631), (-1));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      boolean boolean0 = App.Palindroma("UD'Yqh2fZZ2", 1, 1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      boolean boolean0 = App.Palindroma(",,-", 0, 1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      boolean boolean0 = App.Palindroma("l7:", 0, 1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      String[] stringArray0 = new String[4];
      // Undeclared exception!
      try { 
        App.main(stringArray0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // No line found
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      App app0 = new App();
  }
}*/

public class App_ESTest extends App_ESTest_scaffolding {

    // Test del metodo main con input tramite SystemInUtil
    @Test
    public void testMainWithInput() {
        String[] args = new String[4];
        SystemInUtil.addInputLine(" è palindroma? ");
        App.main(args);
        assertEquals(4, args.length, "Il metodo main dovrebbe accettare un array di lunghezza 4 senza errori.");
    }

    // Test del metodo Palindroma con indici fuori intervallo
    @Test
    public void testPalindromaOutOfBounds() {
        try {
            App.Palindroma("BKu&cuO$wx$=Z", -2631, -1);
            fail("Dovrebbe essere lanciata un'eccezione StringIndexOutOfBoundsException.");
        } catch (StringIndexOutOfBoundsException e) {
            // Test riuscito se viene lanciata l'eccezione
        }
    }

    // Test del metodo Palindroma con singolo carattere (indice iniziale e finale uguali)
    @Test
    public void testPalindromaSingleCharacter() {
        boolean result = App.Palindroma("UD'Yqh2fZZ2", 1, 1);
        assertTrue(result, "Un singolo carattere dovrebbe essere considerato palindromo.");
    }

    // Test del metodo Palindroma con due caratteri uguali
    @Test
    public void testPalindromaTwoCharactersEqual() {
        boolean result = App.Palindroma(",,-", 0, 1);
        assertTrue(result, "Due caratteri uguali dovrebbero essere considerati palindromi.");
    }

    // Test del metodo Palindroma con due caratteri diversi
    @Test
    public void testPalindromaTwoCharactersNotEqual() {
        boolean result = App.Palindroma("l7:", 0, 1);
        assertFalse(result, "Due caratteri diversi non dovrebbero essere considerati palindromi.");
    }

    // Test del metodo main che genera un'eccezione NoSuchElementException
    @Test
    public void testMainThrowsException() {
        String[] args = new String[4];
        try {
            App.main(args);
            fail("Dovrebbe essere lanciata un'eccezione NoSuchElementException.");
        } catch (NoSuchElementException e) {
            // Conferma che l'eccezione riguarda l'assenza di una linea
            verifyException("java.util.Scanner", e);
        }
    }

    // Test che crea un'istanza di App (inutile se non verificato)
    @Test
    public void testAppInstanceCreation() {
        // Questo test non verifica nulla, ma può essere migliorato in futuro
        App app = new App();
        assertNotNull(app, "L'istanza di App dovrebbe essere creata correttamente.");
    }
}
