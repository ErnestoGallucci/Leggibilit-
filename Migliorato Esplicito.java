/*
 * This file was automatically generated by EvoSuite
 * Mon Dec 30 18:31:59 GMT 2024
 */

package com.example;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.example.App;
import java.util.NoSuchElementException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.util.SystemInUtil;
import org.junit.runner.RunWith;

public class App_ESTest extends App_ESTest_scaffolding {

    // Testa il metodo main con input fornito da SystemInUtil
    @Test
    public void testMainWithInput() {
        String[] args = new String[4];
        SystemInUtil.addInputLine(" è palindroma? ");
        App.main(args);
        assertEquals(4, args.length, "Il metodo main dovrebbe accettare un array " +
                "di lunghezza 4 senza errori.");
    }

    // Testa il metodo Palindroma con indici fuori intervallo
    @Test
    public void testPalindromaOutOfBounds() {
        try {
            App.Palindroma("BKu&cuO$wx$=Z", -2631, -1);
            fail("Dovrebbe essere lanciata un'eccezione StringIndexOutOfBoundsException.");
        } catch (StringIndexOutOfBoundsException e) {
            // Test passato: eccezione correttamente lanciata
        }
    }

    // Testa il metodo Palindroma con un singolo carattere
    @Test
    public void testPalindromaSingleCharacter() {
        boolean result = App.Palindroma("UD'Yqh2fZZ2", 1, 1);
        assertTrue(result, "Un singolo carattere dovrebbe essere considerato " +
                "palindromo.");
    }

    // Testa il metodo Palindroma con due caratteri uguali
    @Test
    public void testPalindromaTwoCharactersEqual() {
        boolean result = App.Palindroma(",,-", 0, 1);
        assertTrue(result, "Due caratteri uguali dovrebbero essere " +
                "considerati palindromi.");
    }

    // Testa il metodo Palindroma con due caratteri diversi
    @Test
    public void testPalindromaTwoCharactersNotEqual() {
        boolean result = App.Palindroma("l7:", 0, 1);
        assertFalse(result, "Due caratteri diversi non dovrebbero essere " +
                "considerati palindromi.");
    }

    // Testa il metodo main che genera un'eccezione NoSuchElementException
    @Test
    public void testMainThrowsException() {
        String[] args = new String[4];
        try {
            App.main(args);
            fail("Dovrebbe essere lanciata un'eccezione NoSuchElementException.");
        } catch (NoSuchElementException e) {
            // Verifica che l'eccezione sia dovuta a un input mancante
            verifyException("java.util.Scanner", e);
        }
    }

    // Test per creare un'istanza della classe App
    @Test
    public void testAppInstanceCreation() {
        // Questo test non effettua verifiche, ma può essere utile in futuro
        App app = new App();
        assertNotNull(app, "L'istanza di App dovrebbe essere creata correttamente.");
    }
}
